// Generated by CoffeeScript 2.2.3
var Seq, _, filteredResults, helper, httpStatusPromise, httpStatusReport, httpStatusText, urlParse, videoStatsText;

Seq = require("seq");

_ = require("underscore");

helper = require("./popularLinksHelper.js");

urlParse = require("url").parse;

filteredResults = function(level, results) {
  var filtered;
  filtered = _.filter(results, function(r) {
    var status;
    status = r.status.toLowerCase();
    if (level === "warning") {
      return status === "warning" || status === "alert";
    } else if (level === "alert") {
      return status === "alert";
    } else {
      return true;
    }
  });
  return filtered;
};

videoStatsText = function(rootUrl, level, callback) {
  return Seq().seq(function() {
    return helper.fetchPopularLinks(console, rootUrl, this);
  }).flatten().parEach(function(languagePage, i) {
    console.log(`languagePage ${languagePage}`);
    return helper.videoStatsForLinks(languagePage.popularLinks, this.into(languagePage.url));
  }).unflatten().seq(function(languagePages) {
    var flaggedResults, j, k, len, len1, message, page, pages, r;
    message = "";
    pages = _(languagePages).chain().pluck("url").uniq().value();
    console.log(pages);
    for (j = 0, len = pages.length; j < len; j++) {
      page = pages[j];
      console.log(`ok looking at ${page}`);
      flaggedResults = filteredResults(level, this.vars[page]);
      
      // netcine.us videos are hosted on 3rd party sites, "No Activity" is expected
      flaggedResults = _.filter(flaggedResults, function(r) {
        var hostname, iSNoActivity, isNetCine;
        hostname = urlParse(r.url).hostname.toLowerCase();
        isNetCine = hostname.endsWith("netcine.us");
        iSNoActivity = r.text.toLowerCase() === "no activity";
        console.log(`'${hostname}' -> '${r.text}', isNetCine=${isNetCine}, iSNoActivity=${iSNoActivity}`);
        if (isNetCine && iSNoActivity) {
          console.info(`**** removing ${hostname} from results ****`);
          return false;
        }
        return true;
      });
      if (flaggedResults.length > 0) {
        message += "\n\n";
        message += `******************\ Video Results for ${page} ******************\n`;
        for (k = 0, len1 = flaggedResults.length; k < len1; k++) {
          r = flaggedResults[k];
          message += `${r.status}\t${r.url}\t\t\t\t(${r.text})\n`;
        }
      }
    }
    return callback(null, message);
  }).catch(function(err) {
    console.error(err.stack);
    return callback(err);
  });
};

httpStatusPromise = function(rootUrl) {
  var promise;
  promise = new Promise(function(resolve, reject) {
    return httpStatusReport(rootUrl, function(err, results) {
      if (err) {
        return reject(err);
      } else {
        return resolve(results);
      }
    });
  });
  return promise;
};

httpStatusReport = function(rootUrl, callback) {
  return Seq().seq(function() {
    return helper.fetchPopularLinks(console, rootUrl, this);
  }).flatten().parEach(function(languagePage, i) {
    return helper.httpStatusForLinks(languagePage.popularLinks, this.into(languagePage.url));
  }).unflatten().seq(function(languagePages) {
    return callback(null, this.vars);
  }).catch(function(err) {
    console.error(err.stack);
    return callback(err);
  });
};

httpStatusText = function(rootUrl, level, callback) {
  return Seq().seq(function() {
    return httpStatusReport(rootUrl, this);
  }).seq(function(jsonReport) {
    var flaggedResults, j, len, page, r, report, text;
    text = "";
    for (page in jsonReport) {
      report = jsonReport[page];
      flaggedResults = filteredResults(level, report);
      if (flaggedResults.length > 0) {
        text += "\n\n";
        text += `******************\ HTTP Results for ${page} ******************\n`;
        for (j = 0, len = flaggedResults.length; j < len; j++) {
          r = flaggedResults[j];
          text += `${r.status}\t${r.url}\t\t\t\t(${r.text})\n`;
        }
      }
    }
    return callback(null, text);
  }).catch(function(err) {
    console.error(err.stack);
    return callback(err);
  });
};

module.exports = {
  httpStatusText: httpStatusText,
  httpStatusPromise: httpStatusPromise,
  videoStatsText: videoStatsText
};
